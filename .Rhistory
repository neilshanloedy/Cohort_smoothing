contact_data_input$cnt_age_mean <- apply(contact_data_input[, c("cnt_age_est_min", "cnt_age_est_max")], 1, mean)
if(!is.null(maximum_age)){
participant_data_input = participant_data_input[participant_data_input$part_age < maximum_age,]
contact_data_input = contact_data_input[contact_data_input$part_id %in% participant_data_input$part_id,]
contact_data_input = contact_data_input[contact_data_input$cnt_age_mean < maximum_age,]
contact_data_input = contact_data_input[!is.na(contact_data_input$cnt_age_mean),]
}
survey <- survey(participant_data_input, contact_data_input)
survey$participants[, `:=`(weight, 1)]
if (weigh_dayofweek_input) {
found.dayofweek <- FALSE
if ("dayofweek" %in% colnames(survey$participants)) {
survey$participants[, `:=`(sum_weight, nrow(.SD)),
by = (dayofweek %in% 1:5), ]
survey$participants[dayofweek %in% 1:5, `:=`(weight,
5/sum_weight)]
survey$participants[!(dayofweek %in% 1:5), `:=`(weight,
2/sum_weight)]
survey$participants[, `:=`(sum_weight, NULL)]
found.dayofweek <- TRUE
survey$participants[, `:=`(is.weekday, dayofweek %in%
1:5)]
}
if (!found.dayofweek) {
message("'weigh.dayofweek' is TRUE, but no 'dayofweek' column in the data. ",
"Will ignore.")
}
}
if (weigh_age_input) {
if (!is.null(pop_data_input)) {
message("Will use the inputted population data for weighing")
survey.pop <- data.table(pop_data_input)
survey.pop <- survey.pop[order(lower.age.limit), ]
max.age <- max(survey$participants[, "part_age"],
na.rm = TRUE) + 1
part.age.group.present <- age_breaks_input[age_breaks_input < max.age]
survey.pop$upper.age.limit <- unlist(c(survey.pop[-1,
"lower.age.limit"], 1 + max(survey.pop$lower.age.limit,
part.age.group.present)))
survey.pop.full <- data.table(pop_func(survey.pop,
seq(min(survey.pop$lower.age.limit), max(survey.pop$upper.age.limit))))
} else {
year.list <- unique(data.table(wpp_age(country_input))[, "year"])
if(is.na(year)){
country.pop <- data.table(wpp_age(country_input))
survey.year <- data.table(wpp_age(country_input))[, max(year, na.rm = TRUE)]
message("No data. Will use ", survey.year, " population data.")
} else if(year %in% year.list$year){
country.pop <- data.table(wpp_age(country_input))
survey.year <- year
message("Will use ", survey.year, " population data.")
}
survey.pop <- country.pop[year == survey.year][,
list(population = sum(population)), by = "lower.age.limit"]
survey.pop <- survey.pop[order(lower.age.limit), ]
max.age <- max(survey$participants[, "part_age"],
na.rm = TRUE) + 1
part.age.group.present <- age_breaks_input[age_breaks_input < max.age]
survey.pop$upper.age.limit <- unlist(c(survey.pop[-1,
"lower.age.limit"], 1 + max(survey.pop$lower.age.limit,
part.age.group.present)))
survey.pop.full <- data.table(pop_func(survey.pop,
seq(min(survey.pop$lower.age.limit), max(survey.pop$upper.age.limit))))
}
if (!is.null(age_breaks_input)) {
survey.pop.full <- data.table(pop_func(survey.pop, age_breaks_input))
}
survey$participants[, `:=`(age.count, .N), by = "part_age"]
survey$participants[, `:=`(age.proportion, age.count/.N)]
part.age.all <- range(unique(survey$participants[, "part_age"]), na.rm = T)
survey.pop.detail <- data.table(pop_func(survey.pop.full,
seq(part.age.all[1], part.age.all[2] + 1)))
names(survey.pop.detail) <- c("part_age",
"population.count")
survey.pop.detail[, `:=`(population.proportion, population.count/sum(population.count))]
survey$participants <- merge(survey$participants, survey.pop.detail,
by = eval("part_age"))
survey$participants[, `:=`(weight.age, population.proportion/age.proportion)]
survey$participants[, `:=`(weight, weight * weight.age)]
survey$participants[, `:=`(age.count, NULL)]
survey$participants[, `:=`(age.proportion, NULL)]
survey$participants[, `:=`(population.count, NULL)]
survey$participants[, `:=`(population.proportion, NULL)]
survey$participants[, `:=`(weight.age, NULL)]
}
View(survey$participants)
tapply(survey$participants$weight, survey$participants$part_age, sum)
sum(tapply(survey$participants$weight, survey$participants$part_age, sum))
sum(tapply(partdata$diary_weight2, partdata$participant_age, sum))
# Create a sample data frame
participants_test <- data.frame(age = sample(0:80, 100, replace = TRUE))
participants_test
# Define age breaks
age_breaks_test <- c(0, 25, 50, 100)
# Convert data frame to data.table
participants_dt <- as.data.table(participants_test)
# Group participants' ages based on age breaks
participants_dt[, age_group := cut(age, breaks = age_breaks_test)]
participants_dt
?cut
# Group participants' ages based on age breaks
participants_dt[, age_group := cut(age, breaks = age_breaks_test, right = F)]
participants_dt
if (!is.null(age_breaks_input)) {
survey.pop.full <- data.table(pop_func(survey.pop, age_breaks_input))
survey$participants[, part_age := cut(part_age,
breaks = age_breaks_input, right = F)]
}
survey$participants[, `:=`(age.count, .N), by = "part_age"]
survey$participants
survey$participants$part_age
survey <- survey(participant_data_input, contact_data_input)
survey$participants$part_age
age_breaks_input
age_breaks_input = seq(min(partdata$part_age), max(partdata$part_age)+4, 5)
age_breaks_input = seq(min(participant_data_input$part_age, na.rm = T),
max(participant_data_input$part_age, na.rm = T)+4, 5)
participant_data_input = participants
contact_data_input = contact_common
country_input = c("Belgium")
year = 2015
wave = 12
maximum_age = NULL
age_breaks_input = seq(min(participant_data_input$part_age, na.rm = T),
max(participant_data_input$part_age, na.rm = T)+4, 5)
weigh_dayofweek_input = T
weigh_age_input = T
pop_data_input = population_2023
if(!is.null(wave)){
participant_data_input = participant_data_input[participant_data_input$wave %in% wave,]
contact_data_input = contact_data_input[contact_data_input$part_id %in% participant_data_input$part_id,]
}
contact_data_input$cnt_age_mean <- apply(contact_data_input[, c("cnt_age_est_min", "cnt_age_est_max")], 1, mean)
if(!is.null(maximum_age)){
participant_data_input = participant_data_input[participant_data_input$part_age < maximum_age,]
contact_data_input = contact_data_input[contact_data_input$part_id %in% participant_data_input$part_id,]
contact_data_input = contact_data_input[contact_data_input$cnt_age_mean < maximum_age,]
contact_data_input = contact_data_input[!is.na(contact_data_input$cnt_age_mean),]
}
survey <- survey(participant_data_input, contact_data_input)
survey$participants[, `:=`(weight, 1)]
if (weigh_dayofweek_input) {
found.dayofweek <- FALSE
if ("dayofweek" %in% colnames(survey$participants)) {
survey$participants[, `:=`(sum_weight, nrow(.SD)),
by = (dayofweek %in% 1:5), ]
survey$participants[dayofweek %in% 1:5, `:=`(weight,
5/sum_weight)]
survey$participants[!(dayofweek %in% 1:5), `:=`(weight,
2/sum_weight)]
survey$participants[, `:=`(sum_weight, NULL)]
found.dayofweek <- TRUE
survey$participants[, `:=`(is.weekday, dayofweek %in%
1:5)]
}
if (!found.dayofweek) {
message("'weigh.dayofweek' is TRUE, but no 'dayofweek' column in the data. ",
"Will ignore.")
}
}
!is.null(pop_data_input)
pop_data_input
is.null(pop_data_input)
if (!is.null(pop_data_input)) {
message("Will use the inputted population data for weighing")
survey.pop <- data.table(pop_data_input)
survey.pop <- survey.pop[order(lower.age.limit), ]
max.age <- max(survey$participants[, "part_age"],
na.rm = TRUE) + 1
part.age.group.present <- age_breaks_input[age_breaks_input < max.age]
survey.pop$upper.age.limit <- unlist(c(survey.pop[-1,
"lower.age.limit"], 1 + max(survey.pop$lower.age.limit,
part.age.group.present)))
survey.pop.full <- data.table(pop_func(survey.pop,
seq(min(survey.pop$lower.age.limit), max(survey.pop$upper.age.limit))))
} else {
year.list <- unique(data.table(wpp_age(country_input))[, "year"])
if(is.na(year)){
country.pop <- data.table(wpp_age(country_input))
survey.year <- data.table(wpp_age(country_input))[, max(year, na.rm = TRUE)]
message("No data. Will use ", survey.year, " population data.")
} else if(year %in% year.list$year){
country.pop <- data.table(wpp_age(country_input))
survey.year <- year
message("Will use ", survey.year, " population data.")
}
survey.pop <- country.pop[year == survey.year][,
list(population = sum(population)), by = "lower.age.limit"]
survey.pop <- survey.pop[order(lower.age.limit), ]
max.age <- max(survey$participants[, "part_age"],
na.rm = TRUE) + 1
part.age.group.present <- age_breaks_input[age_breaks_input < max.age]
survey.pop$upper.age.limit <- unlist(c(survey.pop[-1,
"lower.age.limit"], 1 + max(survey.pop$lower.age.limit,
part.age.group.present)))
survey.pop.full <- data.table(pop_func(survey.pop,
seq(min(survey.pop$lower.age.limit), max(survey.pop$upper.age.limit))))
}
!is.null(age_breaks_input)
survey.pop.full <- data.table(pop_func(survey.pop, age_breaks_input))
survey$participants[, part_age := cut(part_age,
breaks = age_breaks_input, right = F)]
survey$participants$part_age
survey$participants[, `:=`(age.count, .N), by = "part_age"]
survey$participants[, `:=`(age.proportion, age.count/.N)]
part.age.all <- range(unique(survey$participants[, "part_age"]), na.rm = T)
survey.pop.detail <- data.table(pop_func(survey.pop.full,
seq(part.age.all[1], part.age.all[2] + 1)))
names(survey.pop.detail) <- c("part_age",
"population.count")
survey.pop.detail[, `:=`(population.proportion, population.count/sum(population.count))]
survey$participants <- merge(survey$participants, survey.pop.detail,
by = eval("part_age"))
survey$participants[, `:=`(weight.age, population.proportion/age.proportion)]
survey$participants[, `:=`(weight, weight * weight.age)]
survey$participants[, `:=`(age.count, NULL)]
survey$participants[, `:=`(age.proportion, NULL)]
survey$participants[, `:=`(population.count, NULL)]
survey$participants[, `:=`(population.proportion, NULL)]
survey$participants[, `:=`(weight.age, NULL)]
tapply(survey$participants$weight, survey$participants$part_age, sum)
tilde.e.2 = tapply(survey$participants$weight, survey$participants$part_age, sum)
# Total number of contacts by age of participants and contacts
mat.id=NULL
un.id=sort(unique(participant_data_input$part_id))
for (i in 1:length(un.id)){
sel.id=contact_data_input$part_id==un.id[i]
vec.id=rep(0,100)
if (sum(sel.id)>0){
vec.id=hist(contact_data_input$cnt_age_mean[sel.id],breaks=seq(0,100,1)-0.5,
plot=F)$counts
}
mat.id=rbind(mat.id,vec.id)
}
mat.id2 = mat.id
for (i in 1:length(un.id)){
mat.id2[i,] = mat.id[i,]*survey$participants$weight[i]
}
# Per participant's age
mat.cont=NULL
weight=NULL
for (i in 0:100){
sel.tmp=survey$participants$part_age[order(survey$participants$part_id)]==i
vec.cont=rep(0,100)
if(sum(sel.tmp)==1){
vec.cont=mat.id2[sel.tmp,]
}
if(sum(sel.tmp)>1){
vec.cont=apply(mat.id2[sel.tmp,],2,sum)
}
mat.cont=rbind(mat.cont,vec.cont)
}
tilde.e.2
mat.cont
P
survey.pop
survey.pop.full
P
# Total number of contacts by age of participants and contacts
mat.id=NULL
un.id=sort(unique(participant_data_input$part_id))
un.id
i = 1
sel.id=contact_data_input$part_id==un.id[i]
sel.id
vec.id=rep(0,100)
sum(sel.id)>0
hist(contact_data_input$cnt_age_mean[sel.id],breaks=seq(0,100,1)-0.5,
plot=F)$counts
contact_data_input$cnt_age_mean[sel.id]
for (i in 1:length(un.id)){
sel.id=contact_data_input$part_id==un.id[i]
vec.id=rep(0,100)
if (sum(sel.id)>0){
vec.id=hist(contact_data_input$cnt_age_mean[sel.id],breaks=seq(0,100,1)-0.5,
plot=F)$counts
}
mat.id=rbind(mat.id,vec.id)
}
mat.id
# Read in social contact data
dir="Data/Polymod Version/"
partdata=read.table(paste(dir,"participants_be_final.txt",sep=""),
header=T,sep="\t")
contdata=read.table(paste(dir,"contacts_be_final.txt",sep=""),
header=T,sep="\t")
dim(contdata)
dim(partdata)
partdata = partdata[partdata$participant_age < 77,]
#str(partdata)
range(partdata$participant_age)
mean(partdata$participant_age)
# hist(partdata$participant_age,nclass=100)
table(partdata$participant_age)
table(partdata$participant_gender)
# contact data
contdata = contdata[contdata$global_id %in% partdata$global_id,]
#' contact's maximum age is 98 adapt later...
contdata = contdata[contdata$cnt_age_mean < 77,]
contdata = contdata[!is.na(contdata$cnt_age_mean),]
# Read in demography:
# population size from 0 to 80 years of age (the last category does not
# include 81 and over)
dir="Data/Demography/"
pop=read.table(paste(dir,"age-specific pop Contact Countries 2005.txt",
sep=""),header=T)
P=pop[,"be"]
# Exposure (mind the age-values) # ages 0-76 # number of participants per age
tilde.e=hist(partdata$participant_age,breaks=seq(0,100,1)-0.5,
plot=F)$counts[1:77]
#' before ---> ... * 745
#' now ---> ... * nrow(partdata)
partdata$diary_weight2 = partdata$diary_weight/sum(partdata$diary_weight)*nrow(partdata)
tilde.e.2 = tapply(partdata$diary_weight2, partdata$participant_age, sum)
sum(tilde.e.2)
cbind(tilde.e, tilde.e.2)
tilde.e.2
# Total number of contacts by age of participants and contacts
mat.id=NULL
un.id=sort(unique(partdata$local_id))
for (i in 1:length(un.id)){
sel.id=contdata$local_id==un.id[i]
vec.id=rep(0,100)
if (sum(sel.id)>0){
vec.id=hist(contdata$cnt_age_mean[sel.id],breaks=seq(0,100,1)-0.5,
plot=F)$counts
}
mat.id=rbind(mat.id,vec.id)
}
mat.id
mat.id2 = mat.id
for (i in 1:length(un.id)){
mat.id2[i,] = mat.id[i,]*partdata$diary_weight2[i]
}
mat.id2
diary_weight2
partdata$diary_weight2
table(partdata$diary_weight2)
mat.id2 = mat.id
for (i in 1:length(un.id)){
mat.id2[i,] = mat.id[i,]*survey$participants$weight[i]
}
mat.id2
Load_Social_Contact_Data_Comix <- function(participant_data_input = partdata,
contact_data_input = contdata,
country_input = c("Belgium"),
weigh_dayofweek_input = T,
weigh_age_input = T,
year = 2015,
wave = 12,
maximum_age = NULL,
pop_data_input = NULL,
age_breaks_input = NULL){
if(!is.null(wave)){
participant_data_input = participant_data_input[participant_data_input$wave %in% wave,]
contact_data_input = contact_data_input[contact_data_input$part_id %in% participant_data_input$part_id,]
}
contact_data_input$cnt_age_mean <- apply(contact_data_input[, c("cnt_age_est_min", "cnt_age_est_max")], 1, mean)
if(!is.null(maximum_age)){
participant_data_input = participant_data_input[participant_data_input$part_age < maximum_age,]
contact_data_input = contact_data_input[contact_data_input$part_id %in% participant_data_input$part_id,]
contact_data_input = contact_data_input[contact_data_input$cnt_age_mean < maximum_age,]
contact_data_input = contact_data_input[!is.na(contact_data_input$cnt_age_mean),]
}
survey <- survey(participant_data_input, contact_data_input)
survey$participants[, `:=`(weight, 1)]
if (weigh_dayofweek_input) {
found.dayofweek <- FALSE
if ("dayofweek" %in% colnames(survey$participants)) {
survey$participants[, `:=`(sum_weight, nrow(.SD)),
by = (dayofweek %in% 1:5), ]
survey$participants[dayofweek %in% 1:5, `:=`(weight,
5/sum_weight)]
survey$participants[!(dayofweek %in% 1:5), `:=`(weight,
2/sum_weight)]
survey$participants[, `:=`(sum_weight, NULL)]
found.dayofweek <- TRUE
survey$participants[, `:=`(is.weekday, dayofweek %in%
1:5)]
}
if (!found.dayofweek) {
message("'weigh.dayofweek' is TRUE, but no 'dayofweek' column in the data. ",
"Will ignore.")
}
}
if (weigh_age_input) {
if (!is.null(pop_data_input)) {
message("Will use the inputted population data for weighing")
survey.pop <- data.table(pop_data_input)
survey.pop <- survey.pop[order(lower.age.limit), ]
max.age <- max(survey$participants[, "part_age"],
na.rm = TRUE) + 1
part.age.group.present <- age_breaks_input[age_breaks_input < max.age]
survey.pop$upper.age.limit <- unlist(c(survey.pop[-1,
"lower.age.limit"], 1 + max(survey.pop$lower.age.limit,
part.age.group.present)))
survey.pop.full <- data.table(pop_func(survey.pop,
seq(min(survey.pop$lower.age.limit), max(survey.pop$upper.age.limit))))
} else {
year.list <- unique(data.table(wpp_age(country_input))[, "year"])
if(is.na(year)){
country.pop <- data.table(wpp_age(country_input))
survey.year <- data.table(wpp_age(country_input))[, max(year, na.rm = TRUE)]
message("No data. Will use ", survey.year, " population data.")
} else if(year %in% year.list$year){
country.pop <- data.table(wpp_age(country_input))
survey.year <- year
message("Will use ", survey.year, " population data.")
}
survey.pop <- country.pop[year == survey.year][,
list(population = sum(population)), by = "lower.age.limit"]
survey.pop <- survey.pop[order(lower.age.limit), ]
max.age <- max(survey$participants[, "part_age"],
na.rm = TRUE) + 1
part.age.group.present <- age_breaks_input[age_breaks_input < max.age]
survey.pop$upper.age.limit <- unlist(c(survey.pop[-1,
"lower.age.limit"], 1 + max(survey.pop$lower.age.limit,
part.age.group.present)))
survey.pop.full <- data.table(pop_func(survey.pop,
seq(min(survey.pop$lower.age.limit), max(survey.pop$upper.age.limit))))
}
if (!is.null(age_breaks_input)) {
survey.pop.full <- data.table(pop_func(survey.pop, age_breaks_input))
survey$participants[, part_age := cut(part_age,
breaks = age_breaks_input, right = F)]
}
survey$participants[, `:=`(age.count, .N), by = "part_age"]
survey$participants[, `:=`(age.proportion, age.count/.N)]
part.age.all <- range(unique(survey$participants[, "part_age"]), na.rm = T)
survey.pop.detail <- data.table(pop_func(survey.pop.full,
seq(part.age.all[1], part.age.all[2] + 1)))
names(survey.pop.detail) <- c("part_age",
"population.count")
survey.pop.detail[, `:=`(population.proportion, population.count/sum(population.count))]
survey$participants <- merge(survey$participants, survey.pop.detail,
by = eval("part_age"))
survey$participants[, `:=`(weight.age, population.proportion/age.proportion)]
survey$participants[, `:=`(weight, weight * weight.age)]
survey$participants[, `:=`(age.count, NULL)]
survey$participants[, `:=`(age.proportion, NULL)]
survey$participants[, `:=`(population.count, NULL)]
survey$participants[, `:=`(population.proportion, NULL)]
survey$participants[, `:=`(weight.age, NULL)]
}
tilde.e.2 = tapply(survey$participants$weight, survey$participants$part_age, sum)
# Total number of contacts by age of participants and contacts
mat.id=NULL
un.id=sort(unique(participant_data_input$part_id))
for (i in 1:length(un.id)){
sel.id=contact_data_input$part_id==un.id[i]
vec.id=rep(0,100)
if (sum(sel.id)>0){
vec.id=hist(contact_data_input$cnt_age_mean[sel.id],breaks=seq(0,100,1)-0.5,
plot=F)$counts
}
mat.id=rbind(mat.id,vec.id)
}
mat.id2 = mat.id
for (i in 1:length(un.id)){
mat.id2[i,] = mat.id[i,]*survey$participants$weight[i]
}
# Per participant's age
mat.cont=NULL
weight=NULL
for (i in 0:100){
sel.tmp=survey$participants$part_age[order(survey$participants$part_id)]==i
vec.cont=rep(0,100)
if(sum(sel.tmp)==1){
vec.cont=mat.id2[sel.tmp,]
}
if(sum(sel.tmp)>1){
vec.cont=apply(mat.id2[sel.tmp,],2,sum)
}
mat.cont=rbind(mat.cont,vec.cont)
}
return(list(mat_cont=mat.cont, tilde_e=tilde.e.2, P=survey.pop.full))
}
Load_Social_Contact_Data_Comix(participant_data_input = participants,
contact_data_input = contact_common,
wave = 12)
Load_Social_Contact_Data_Comix(participant_data_input = participants,
contact_data_input = contact_common,
wave = 12,
pop_data_input = population_2023)
library(data.table)
library(socialmixr)
library(dplyr)
library(rstudioapi)
dir <- dirname(getActiveDocumentContext()$path)
setwd(dirname(getActiveDocumentContext()$path))
source("SourceCode_ReadInData_with_weights_CoMix.R")
#-----
# load the datasets
part_common <- read.csv("Data/be_comix/BE_Waves_12_43/CoMix_BE_participant_common.csv")
part_extra <- read.csv("Data/be_comix/BE_Waves_12_43/CoMix_BE_participant_extra.csv")
contact_common <- read.csv("Data/be_comix/BE_Waves_12_43/CoMix_BE_contact_common.csv")
participants <- merge(part_common, part_extra, by = c("part_id"))
participants <- rename(participants, dayofweek = weekday)
population_2023 <- read.table("Data/Demography/population_2023.txt")
Load_Social_Contact_Data_Comix(participant_data_input = participants,
contact_data_input = contact_common,
wave = 12,
pop_data_input = population_2023,
weigh_age_input = T,
weigh_dayofweek_input = T)
Load_Social_Contact_Data_Comix(participant_data_input = participants,
contact_data_input = contact_common,
wave = 12,
pop_data_input = population_2023,
maximum_age = 77,
weigh_age_input = T,
weigh_dayofweek_input = T)
