library(socialmixr)
library(data.table)
library(dplyr)
?socialmixr
?contact_matrix
pop_func <- function (pop, age.limits, pop.age.column = "lower.age.limit",
pop.column = "population", ...) {
chkDots(...)
if (!is.data.frame(pop) || !all(hasName(pop, c(pop.age.column,
pop.column)))) {
stop("Expecting 'pop' to be a data.frame with columns ",
pop.age.column, " and ", pop.column)
}
pop <- data.table(pop)
setkeyv(pop, pop.age.column)
if (!missing(age.limits)) {
age.limits <- sort(age.limits)
max.age <- max(pop[, pop.age.column, with = FALSE])
missing.ages <- setdiff(age.limits[age.limits <= max.age],
pop[[pop.age.column]])
if (length(missing.ages) > 0) {
message("Not all age groups represented in population data (5-year age band).\n  Linearly estimating age group sizes from the 5-year bands.")
..original.upper.age.limit <- NULL
pop <- pop[, `:=`(..original.upper.age.limit, c(pop[[pop.age.column]][-1],
NA))]
pop <- pop[, `:=`(..original.lower.age.limit, get(pop.age.column))]
all.ages <- data.frame(age.limits[age.limits <= max(pop[[pop.age.column]])])
colnames(all.ages) <- pop.age.column
pop <- merge(pop, all.ages, all = TRUE, by = pop.age.column)
pop <- pop[, `:=`(..segment, cumsum(!is.na(..original.lower.age.limit)))]
pop <- pop[, `:=`(..original.lower.age.limit, ..original.lower.age.limit[1]),
by = ..segment]
pop <- pop[, `:=`(..original.upper.age.limit, ..original.upper.age.limit[1]),
by = ..segment]
pop <- pop[, `:=`(paste(pop.column), get(pop.column)[1]),
by = ..segment]
pop <- pop[, `:=`(..upper.age.limit, c(pop[[pop.age.column]][-1],
NA))]
pop[!is.na(..original.upper.age.limit), `:=`(population,
round(population * (..upper.age.limit - get(pop.age.column))/(..original.upper.age.limit -
..original.lower.age.limit)))]
pop <- pop[, c(pop.age.column, pop.column), with = FALSE]
}
pop <- pop[get(pop.age.column) >= min(age.limits)]
pop <- pop[, `:=`(paste(pop.age.column), reduce_agegroups(get(pop.age.column),
age.limits))]
pop <- pop[, list(..population = sum(get(pop.column))),
by = pop.age.column]
setnames(pop, "..population", pop.column)
}
setkeyv(pop, pop.age.column)
return(as.data.frame(pop))
}
contact_data_input
participant_data_input = partdata
library(data.table)
library(socialmixr)
library(dplyr)
library(rstudioapi)
dir <- dirname(getActiveDocumentContext()$path)
setwd(dirname(getActiveDocumentContext()$path))
source("SourceCode_ReadInData_with_weights_CoMix.R")
#-----
# load the datasets
part_common <- read.csv("Data/be_comix/BE_Waves_12_43/CoMix_BE_participant_common.csv")
part_extra <- read.csv("Data/be_comix/BE_Waves_12_43/CoMix_BE_participant_extra.csv")
contact_common <- read.csv("Data/be_comix/BE_Waves_12_43/CoMix_BE_contact_common.csv")
participants <- merge(part_common, part_extra, by = c("part_id"))
participants <- rename(participants, dayofweek = weekday)
population_2023 <- read.table("Data/Demography/population_2023.txt")
participant_data_input = participants
contact_data_input = contact_common
wave = 12
pop_data_input = population_2023
maximum_age = 77
weigh_age_input = F
weigh_dayofweek_input = T
contact_data_input
is.null(maximum_age)
!is.null(maximum_age)
is.null(maximum_age)
!is.null(maximum_age)
maximum_age <- maximum_age
if(!is.null(maximum_age)) {
maximum_age <- 100
}
maximum_age
mapply(function(x, y)
if(is.na(x) == F & is.na(y) == F){
# sample an age based on the min and max age they reported
sample(seq(x, y), 1)
} else {
# if no age was reported, sample between 0-120
sample(seq(0,maximum_age), 1)
}, contact_data_input$cnt_age_est_min, contact_data_input$cnt_age_est_max)
colnames(participant_data_input)
View(pop_data_input)
View(participant_data_input)
mapply(function(x, y)
if(is.na(x) == F & is.na(y) == F){
# sample an age based on the min and max age they reported
sample(seq(x, y), 1)
} else {
# if no age was reported, sample between 0-120
sample(seq(0,maximum_age), 1)
}, participant_data_input$part_age_est_min, participant_data_input$part_age_est_min)
estimated_participant_age
estimated_participant_age = T
estimated_contact_age_unif = T
estimated_participant_age = T
estimated_contact_age = T
if(estimated_participant_age) {
maximum_age <- maximum_age
if(!is.null(maximum_age)) {
maximum_age <- 100
}
participant_data_input$part_age <- mapply(function(x, y)
if(is.na(x) == F & is.na(y) == F){
# sample an age based on the min and max age they reported
sample(seq(x, y), 1)
} else {
# if no age was reported, sample between 0-120
sample(seq(0,maximum_age), 1)
}, participant_data_input$part_age_est_min, participant_data_input$part_age_est_min)
}
View(participant_data_input)
participant_data_input %>% select(part_age, part_age_est_max, part_age_est_min) %>% View()
T == F
seq(57, 57)
seq(57, 57)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
seq(57, 57)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
sample(seq(57, 57), 1)
seq(57, 57)
seq(57, 57)
seq(57, 57)
seq(57, 57)
seq(57, 57)
seq(57, 57)
seq(57, 57)
seq(57, 57)
sample(c(seq(57,57)), 1)
sample(c(seq(57,57)), 1)
sample(c(seq(57,57)), 1)
sample(c(seq(57,57)), 1)
sample(c(seq(57,57)), 1)
sample(c(1,2,3,4), 1)
sample(c(1,2,3,4), 1)
sample(c(1,2,3,4), 1)
sample(c(1,2,3,4), 1)
sample(c(1,2,3,4), 1)
sample(c(1,2,3,4), 1)
sample(c(1,2,3,4), 1)
sample(c(1,2,3,4), 1)
sample(c(1,2,3,4), 1)
sample(c(1,2,3,4), 1)
sample(c(1,2,3,4), 1)
sample(c(57), 1)
resample
install.packages("gdata")
library(gdata)
if(estimated_participant_age) {
maximum_age <- maximum_age
if(!is.null(maximum_age)) {
maximum_age <- 100
}
participant_data_input$part_age <- mapply(function(x, y)
if(is.na(x) == F & is.na(y) == F){
# sample an age based on the min and max age they reported
sample(seq(x, y), 1)
} else {
# if no age was reported, sample between 0-120
resample(seq(0,maximum_age), 1)
}, participant_data_input$part_age_est_min, participant_data_input$part_age_est_min)
}
participant_data_input %>% select(part_age, part_age_est_max, part_age_est_min) %>% View()
participant_data_input = partdata
contact_data_input = contdata
country_input = c("Belgium")
participant_data_input = partdata
participant_data_input = participants
contact_data_input = contact_common
wave = 12
pop_data_input = population_2023
maximum_age = 77
weigh_age_input = F
weigh_dayofweek_input = T
mapply(function(x, y)
if(is.na(x) == F & is.na(y) == F){
# sample an age based on the min and max age they reported
sample(seq(x, y), 1)
} else {
# if no age was reported, sample between 0-120
resample(seq(0,maximum_age), 1)
}, participant_data_input$part_age_est_min, participant_data_input$part_age_est_min)
mapply(function(x, y)
if(is.na(x) == F & is.na(y) == F){
# sample an age based on the min and max age they reported
resample(seq(x, y), 1)
} else {
# if no age was reported, sample between 0-120
resample(seq(0,maximum_age), 1)
}, participant_data_input$part_age_est_min, participant_data_input$part_age_est_min)
participant_data_input$part_age <- mapply(function(x, y)
if(is.na(x) == F & is.na(y) == F){
# sample an age based on the min and max age they reported
resample(seq(x, y), 1)
} else {
# if no age was reported, sample between 0-120
resample(seq(0,maximum_age), 1)
}, participant_data_input$part_age_est_min, participant_data_input$part_age_est_min)
table(participant_data_input$part_age)
estimated_contact_age
if(estimated_contact_age) {
maximum_age <- maximum_age
if(!is.null(maximum_age)) {
maximum_age <- 100
}
# sampling contact age
contact_data_input$cnt_age_mean <- mapply(function(x, y)
if(is.na(x) == F & is.na(y) == F){
# sample an age based on the min and max age they reported
resample(seq(x, y), 1)
} else {
# if no age was reported, sample between 0-120
resample(seq(0,maximum_age), 1)
}, contact_data_input$cnt_age_est_min, contact_data_input$cnt_age_est_max)
} else {
contact_data_input$cnt_age_mean <- apply(contact_data_input[, c("cnt_age_est_min", "cnt_age_est_max")], 1, mean)
}
contact_data_input %>% select(cnt_age_mean, cnt_age_est_max, cnt_age_est_min) %>% View()
Load_Social_Contact_Data_Comix <- function(participant_data_input = partdata,
contact_data_input = contdata,
country_input = c("Belgium"),
estimated_participant_age = T,
estimated_contact_age = T,
weigh_dayofweek_input = T,
weigh_age_input = T,
age_breaks_input = NULL,
year = 2015,
wave = 12,
maximum_age = NULL,
pop_data_input = NULL){
if(estimated_participant_age) {
maximum_age <- maximum_age
if(!is.null(maximum_age)) {
maximum_age <- 100
}
participant_data_input$part_age <- mapply(function(x, y)
if(is.na(x) == F & is.na(y) == F){
# sample an age based on the min and max age they reported
resample(seq(x, y), 1)
} else {
# if no age was reported, sample between 0-120
resample(seq(0,maximum_age), 1)
}, participant_data_input$part_age_est_min, participant_data_input$part_age_est_min)
}
if(estimated_contact_age) {
maximum_age <- maximum_age
if(!is.null(maximum_age)) {
maximum_age <- 100
}
# sampling contact age
contact_data_input$cnt_age_mean <- mapply(function(x, y)
if(is.na(x) == F & is.na(y) == F){
# sample an age based on the min and max age they reported
resample(seq(x, y), 1)
} else {
# if no age was reported, sample between 0-120
resample(seq(0,maximum_age), 1)
}, contact_data_input$cnt_age_est_min, contact_data_input$cnt_age_est_max)
} else {
contact_data_input$cnt_age_mean <- apply(contact_data_input[, c("cnt_age_est_min", "cnt_age_est_max")], 1, mean)
}
if(!is.null(wave)){
participant_data_input = participant_data_input[participant_data_input$wave %in% wave,]
contact_data_input = contact_data_input[contact_data_input$part_id %in% participant_data_input$part_id,]
}
if(!is.null(maximum_age)){
participant_data_input = participant_data_input[participant_data_input$part_age < maximum_age,]
contact_data_input = contact_data_input[contact_data_input$part_id %in% participant_data_input$part_id,]
contact_data_input = contact_data_input[contact_data_input$cnt_age_mean < maximum_age,]
contact_data_input = contact_data_input[!is.na(contact_data_input$cnt_age_mean),]
}
survey <- survey(participant_data_input, contact_data_input)
survey$participants[, `:=`(weight, 1)]
if (weigh_dayofweek_input) {
found.dayofweek <- FALSE
if ("dayofweek" %in% colnames(survey$participants)) {
survey$participants[, `:=`(sum_weight, nrow(.SD)),
by = (dayofweek %in% 1:5), ]
survey$participants[dayofweek %in% 1:5, `:=`(weight,
5/sum_weight)]
survey$participants[!(dayofweek %in% 1:5), `:=`(weight,
2/sum_weight)]
survey$participants[, `:=`(sum_weight, NULL)]
found.dayofweek <- TRUE
survey$participants[, `:=`(is.weekday, dayofweek %in%
1:5)]
}
if (!found.dayofweek) {
message("'weigh.dayofweek' is TRUE, but no 'dayofweek' column in the data. ",
"Will ignore.")
}
}
if (weigh_age_input) {
if (!is.null(pop_data_input)) {
message("Will use the inputted population data for weighing")
survey.pop <- data.table(pop_data_input)
survey.pop <- survey.pop[order(lower.age.limit), ]
max.age <- max(survey$participants[, "part_age"],
na.rm = TRUE) + 1
part.age.group.present <- age_breaks_input[age_breaks_input < max.age]
survey.pop$upper.age.limit <- unlist(c(survey.pop[-1,
"lower.age.limit"], 1 + max(survey.pop$lower.age.limit,
part.age.group.present)))
survey.pop.full <- data.table(pop_func(survey.pop,
seq(min(survey.pop$lower.age.limit), max(survey.pop$upper.age.limit))))
} else {
year.list <- unique(data.table(wpp_age(country_input))[, "year"])
if(is.na(year)){
country.pop <- data.table(wpp_age(country_input))
survey.year <- data.table(wpp_age(country_input))[, max(year, na.rm = TRUE)]
message("No data. Will use ", survey.year, " population data.")
} else if(year %in% year.list$year){
country.pop <- data.table(wpp_age(country_input))
survey.year <- year
message("Will use ", survey.year, " population data.")
}
survey.pop <- country.pop[year == survey.year][,
list(population = sum(population)), by = "lower.age.limit"]
survey.pop <- survey.pop[order(lower.age.limit), ]
max.age <- max(survey$participants[, "part_age"],
na.rm = TRUE) + 1
part.age.group.present <- age_breaks_input[age_breaks_input < max.age]
survey.pop$upper.age.limit <- unlist(c(survey.pop[-1,
"lower.age.limit"], 1 + max(survey.pop$lower.age.limit,
part.age.group.present)))
survey.pop.full <- data.table(pop_func(survey.pop,
seq(min(survey.pop$lower.age.limit), max(survey.pop$upper.age.limit))))
}
if (!is.null(age_breaks_input)) {
survey.pop.full <- data.table(pop_func(survey.pop, age_breaks_input))
survey$participants[, part_age := cut(part_age,
breaks = age_breaks_input, right = F)]
}
survey$participants[, `:=`(age.count, .N), by = "part_age"]
survey$participants[, `:=`(age.proportion, age.count/.N)]
part.age.all <- range(unique(survey$participants[, "part_age"]), na.rm = T)
survey.pop.detail <- data.table(pop_func(survey.pop.full,
seq(part.age.all[1], part.age.all[2] + 1)))
names(survey.pop.detail) <- c("part_age",
"population.count")
survey.pop.detail[, `:=`(population.proportion, population.count/sum(population.count))]
survey$participants <- merge(survey$participants, survey.pop.detail,
by = eval("part_age"))
survey$participants[, `:=`(weight.age, population.proportion/age.proportion)]
survey$participants[, `:=`(weight, weight * weight.age)]
survey$participants[, `:=`(age.count, NULL)]
survey$participants[, `:=`(age.proportion, NULL)]
survey$participants[, `:=`(population.count, NULL)]
survey$participants[, `:=`(population.proportion, NULL)]
survey$participants[, `:=`(weight.age, NULL)]
}
tilde.e.2 = tapply(survey$participants$weight, survey$participants$part_age, sum)
# Total number of contacts by age of participants and contacts
mat.id=NULL
un.id=sort(unique(participant_data_input$part_id))
for (i in 1:length(un.id)){
sel.id=contact_data_input$part_id==un.id[i]
vec.id=rep(0,100)
if (sum(sel.id)>0){
vec.id=hist(contact_data_input$cnt_age_mean[sel.id],breaks=seq(0,100,1)-0.5,
plot=F)$counts
}
mat.id=rbind(mat.id,vec.id)
}
mat.id2 = mat.id
for (i in 1:length(un.id)){
mat.id2[i,] = mat.id[i,]*survey$participants$weight[i]
}
# Per participant's age
mat.cont=NULL
weight=NULL
for (i in 0:100){
sel.tmp=survey$participants$part_age[order(survey$participants$part_id)]==i
vec.cont=rep(0,100)
if(sum(sel.tmp)==1){
vec.cont=mat.id2[sel.tmp,]
}
if(sum(sel.tmp)>1){
vec.cont=apply(mat.id2[sel.tmp,],2,sum)
}
mat.cont=rbind(mat.cont,vec.cont)
}
return(list(mat_cont=mat.cont, tilde_e=tilde.e.2, P=survey.pop.full))
}
Load_Social_Contact_Data_Comix(participant_data_input = participants,
contact_data_input = contact_common,
wave = 43,
pop_data_input = population_2023,
maximum_age = 77,
weigh_age_input = T,
weigh_dayofweek_input = T)
result <- Load_Social_Contact_Data_Comix(participant_data_input = participants,
contact_data_input = contact_common,
wave = 43,
pop_data_input = population_2023,
maximum_age = 77,
weigh_age_input = T,
weigh_dayofweek_input = T)
plot(result$mat_cont)
heatmap(result$mat_cont,
col = colorRampPalette(c("blue", "white", "red"))(100),  # Define the color palette
scale = "none",  # Choose scaling options ("none", "row", "column", "zscore")
Rowv = NA, Colv = NA,  # Turn off row and column dendrogram
margins = c(10, 10)  # Set margins
)
